name: Build and Upload PyWebGuard Package

on:
  push:
    branches: [main]
  pull_request:
    branches: ['*']

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: ['3.11']

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-cov pytest-html

      - name: Check Code Format
        uses: weibullguy/python-lint-plus@master
        with:
          use-black: true
          use-yapf: false
          use-isort: false
          use-docformatter: false
          use-pycodestyle: false
          use-autopep8: false
          use-pydocstyle: false
          use-mypy: false
          use-pylint: false
          use-flake8: false
          use-mccabe: false
          use-radon: false
          use-rstcheck: false
          use-check-manifest: false
          use-pyroma: false

      - name: Run Tests
        run: |
          pytest --verbose tests/
      
      - name: Pytest Coverage
        id: coverage
        run: |
          pytest --cov=pywebguard --cov-report=term-missing --cov-report=html --cov-report=xml tests/
          echo "Coverage report generated in htmlcov/"
          # Extract coverage and format as percentage
          COVERAGE=$(cat coverage.xml | grep -o 'line-rate="[0-9.]*"' | cut -d'"' -f2)
          COVERAGE_PCT=$(printf "%.1f" $(echo "$COVERAGE * 100" | bc))
          echo "coverage=$COVERAGE_PCT" >> $GITHUB_OUTPUT
          echo "Coverage: $COVERAGE_PCT%"

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov/

      - name: Comment PR with Coverage
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const coverage = '${{ steps.coverage.outputs.coverage }}';
            const message = `## üìä Test Coverage Report
            
            Current test coverage: **${coverage}%**
            
            Detailed coverage report is available in the [workflow artifacts](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}).
            
            ### Coverage Summary
            - Total Coverage: ${coverage}%
            - Report generated at: ${new Date().toISOString()}
            `;
            
            try {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: message
              });
            } catch (error) {
              console.error('Error creating comment:', error);
              throw error;
            }

      - name: Send Telegram Notification
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          format: markdown
          message: |
            üöÄ *PyWebGuard Pipeline Status*

            üë§ *Actor:* `${{ github.actor }}`
            üì¶ *Repository:* `${{ github.repository }}`
            üîÑ *Branch:* `${{ github.ref_name }}`
            üìù *Commit:* `${{ github.sha }}`
            üí¨ *Message:* `${{ github.event.head_commit.message }}`

            üìä *Test Coverage:* `${{ steps.coverage.outputs.coverage }}%`

            üîç *Coverage Report:* [View Report](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

            *Status:* `${{ job.status }}`

      - name: Bump version and push tag
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        id: bump
        uses: phips28/gh-action-bump-version@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # Version bump rules:
          # - major: "major:" or "breaking:" in commit message ‚Üí v(X+1).0.0
          # - minor: "feat:" or "feature:" in commit message ‚Üí vX.(Y+1).0
          # - patch: "fix:" or "patch:" in commit message ‚Üí vX.Y.(Z+1)
          minor-wording: 'feat,feature'
          major-wording: 'major,breaking'
          patch-wording: 'fix,patch'
          release-branches: 'main'

      - name: Create Release
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ steps.bump.outputs.newTag }}
          tag_name: ${{ steps.bump.outputs.newTag }}
          body: |
            ## What's Changed
            
            This release includes:
            - Test coverage: ${{ steps.coverage.outputs.coverage }}%
            - Latest security updates
            - Bug fixes and improvements
            
            For detailed changes, check the [commit history](https://github.com/${{ github.repository }}/commits).
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: "Installs and upgrades pip, installs other dependencies and installs the package from setup.py"
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        env:
          VERSION: ${{ steps.bump.outputs.newTag }}
        run: |
          # Upgrade pip
          python3 -m pip install --upgrade pip
          # Install build deps
          python3 -m pip install setuptools wheel twine
          # If requirements.txt exists, install from it
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          # Install the package from setup.py
          export VERSION=${{ steps.bump.outputs.newTag }}
          echo $VERSION
          python3 setup.py install

      # Upload to PyPi
      - name: Build and Upload to PyPi
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          export VERSION=${{ steps.bump.outputs.newTag }}
          echo $VERSION
          python3 setup.py sdist bdist_wheel
          ls -la dist/
          python3 -m twine upload --verbose dist/*.whl dist/*.tar.gz

        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}